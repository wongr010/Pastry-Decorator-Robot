.section .exceptions, "ax"
	subi sp, sp, 16
	stw r10,0(sp)
	stw et,4(sp) #we also save et and ctl1 just in case this interrupt interrupted another ISR
	rdctl et,ctl1
	stw et,8(sp)
	stw ea,12(sp)
	
	rdctl et, ctl4 #read bit 0?
	andi et, et, 0x1 #check if
	beq et, r0, jtaginterrupt
	
	movia et, TIMER
	movia r11, JTAG2
	movia r8, JTAG
	stwio r0, 0(et) #acknowledge interrupt
	
	call READ_SENSORS #sensor states in r9, speed in r10
	andi r10, r10, 0x0FF
	#need to change speed to ASCII
	
	#clear the terminal
	movi r7, 0x1b #<ESC>
	stwio r7, 0(r11) 
	
	movi r7, 0x5b #[
	stwio r7, 0(r11) 
	
	movi r7, 0x32 #2
	stwio r7, 0(r11) 
	
	movi r7, 0x4A #J
	stwio r7, 0(r11)
	
	#need to convert the speed to ASCII
	stwio r10, 0(r11) #send the speed to the jtag
	
	movi et, 1
	wrctl ctl0, et #enable interrupts again
	
	br EXIT
	
	jtaginterrupt:
	
		movia r7, JTAG2
		movia r8, JTAG
		ldwio r2, 0(r7)
		andi r3, r2, 0x8000 #is data valid?
		beq r3, r0, EXIT
		movi r4, 0b1110010 #is the data r
		beq r2, r4, write_sensors
		movi r4, 0b1110011 #is the data s
		beq r2, r4, write_speed
		
		write_sensors:
			call READ_SENSORS
			#r9 has sensor data
			andi r9, r9, 0x0FF
			movi r6, 0x1b #<ESC>
			stwio r6, 0(r7) 
	
			movi r6, 0x5b #[
			stwio r6, 0(r7) 
			
			movi r6, 0x32 #2
			stwio r6, 0(r7) 
			
			movi r6, 0x4A #J
			stwio r6, 0(r7)
			
			stw r9, 0(r7)
			
			br EXIT
			
		write_speed:
		call READ_SENSORS
			#r10 has speed data
			andi r10, r9, 0x0FF
			movi r10, 0x1b #<ESC>
			stwio r6, 0(r7) 
	
			movi r6, 0x5b #[
			stwio r6, 0(r7) 
			
			movi r6, 0x32 #2
			stwio r6, 0(r7) 
			
			movi r6, 0x4A #J
			stwio r6, 0(r7)
			
			stw r10, 0(r7)
			
			br EXIT
			
			EXIT:
			wrctl ctl0, r0 #turn off PIE bit
			# now restore the registers we saved
			ldw r10,0(sp)
			ldw et,8(sp)
			wrctl ctl1, et
			ldw et,4(sp)
			ldw ea,12(sp) #and we save the return address, that will change if this ISR is interrupted
			addi sp,sp,16 #stack back to where it was
			subi ea,ea,4 #adjust return address
			eret #go back to interrupted routine
	
	